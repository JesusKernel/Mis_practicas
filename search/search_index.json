{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Ejercicio1/","title":"Pr\u00e1ctica 1","text":"<p>1</p> <p>Git</p> <p>GitHub</p> <p>JES\u00daS \u00c1LVAREZ OLMO</p> <p>2ASIX</p> <p>!!! success \"Objectius\" Recordar l'\u00fas de git per a realitzar el control de versions dels projectes. Configu- rar un compte a GitHub, servei que ens ofereix repositoris remots. Recordar el cicle de vida de la gesti\u00f3 dels nostres repositoris: creaci\u00f3, clonatge, sincronitzaci\u00f3, ... i els nostres fitxers: creaci\u00f3, modificaci\u00f3, esborrat.</p> <p>Qu\u00e9 has de fer?</p> <p>Crea un compte a GitHub (Si no el tens!!!). La forma d'accedir als repositoris remots de GitHub ser\u00e0 per SSH, per tant has de copiar la teua clau p\u00fablica RSA a GitHub, per aix\u00f2:</p> <p>Crea a GitHub un repositori amb el nom prova_el_teu_nom (inicialitza el repositori amb un fitxer README) i la descripci\u00f3 Repositorio de prueba 2ASIX.</p> <p>{width=\"12.965cm\" height=\"15.901cm\"}</p> <ol> <li>Instal\u00b7la git en el teu ordinador (si no el tens instalado!!!).</li> </ol> <p>apt-get install git</p> <p>{width=\"15.901cm\" height=\"1.64cm\"}</p> <p>Configuraci\u00f3 de git. El primer que hauries defer quan instal\u00b7les Git \u00e9s establir elteu nom d'usuari i adre\u00e7a de correu electr\u00f2nic (Assegura't que les dades s\u00f3n correctes i que has posat el teu nom complet). Aix\u00f2 \u00e9s important perqu\u00e8 les confirmacions de canvis (commits) a Git utilitzen aquesta informaci\u00f3, i \u00e9s introdu\u00efda de manera immutable en els commits que envieu:</p> <p>git config --global user.name \\\"John Doe\\\"</p> <p>git config --global user.email johndoe@example.com</p> <p>{width=\"15.901cm\" height=\"1.058cm\"}</p> <p>{width=\"15.901cm\" height=\"0.873cm\"}</p> <p>De nou, nom\u00e9s cal fer-ho una vegada si especifiques l'opci\u00f3 --global, ja que Git sempre utilitzar\u00e0 aquesta informaci\u00f3 per a tot el que facis en aquest sistema.</p> <p>Clonar el repositori remot. Copia la url SSH del repositori (no copi\u00efs la URL https) i clonarem el repositori al nostre ordinador.</p> <p>{width=\"15.901cm\" height=\"6.75cm\"}</p> <p>Crearem un nou fitxer, l'afegirem al nostre repositori local i despr\u00e9s ho sincronitzarem amb el nostre repositori remot de GitHub. Cada vegada que fem una modificaci\u00f3 en un fitxer ho podem assenyalar creant un commit. Els missatges dels commits s\u00f3n fonamentals per explicar l'evoluci\u00f3 d'un projecte. Un commit ha de ser un petit conjunt de canvis dels fitxers del projecte amb una certa coher\u00e8ncia.</p> <p>echo \\\"A\u00e7\u00f2 \u00e9s una prova\\\"</p> <p>git add exemple.txt</p> <p>{width=\"15.901cm\" height=\"0.82cm\"}</p> <p>{width=\"15.901cm\" height=\"1.561cm\"}</p> <p>git commit -m \\\"He creat el fitxer exemple.txt\\\"</p> <p>{width=\"15.901cm\" height=\"5.662cm\"}</p> <p>git push</p> <p>{width=\"15.901cm\" height=\"7.916cm\"}</p> <p>Resultado del \u00abpush\u00bb en el repositorio de la nube.</p> <p>{width=\"15.901cm\" height=\"7.736cm\"}</p> <p>Si modifiqueu un fitxer al vostre repositori local, no l'heu de tornar a afegir al vostre repositori (git add). Per\u00f2 has de fer servir l'opci\u00f3 -a en fer el commit.</p> <p>{width=\"15.901cm\" height=\"1.879cm\"}</p> <p>git commit -am \\\"He modificado el fichero ejemplo.txt\\\"</p> <p>{width=\"15.901cm\" height=\"1.482cm\"}</p> <p>git push</p> <p>{width=\"15.901cm\" height=\"8.183cm\"}</p> <p>Si vols canviar el nom d'un fitxer o directori del teu repositori:</p> <p>git mv ejemplo.txt ejemplo2.txt</p> <p>{width=\"15.901cm\" height=\"1.191cm\"}</p> <p>git commit -am \\\"He cambiado el nombre del fichero\\\"</p> <p>{width=\"15.901cm\" height=\"1.588cm\"}</p> <p>git push</p> <p>{width=\"15.901cm\" height=\"5.953cm\"}</p> <p>Resultado del \u00abpush\u00bb en el repositorio de la nube.</p> <p>{width=\"15.901cm\" height=\"10.622cm\"}</p> <p>Si vols esborrar un fitxer del teu repositori:</p> <p>git rm exemple2.txt</p> <p>{width=\"15.901cm\" height=\"3.784cm\"}</p> <p>git commit -am \\\"He esborrat el fitxer exemple2\\\"</p> <p>{width=\"15.901cm\" height=\"3.9cm\"}</p> <p>git push</p> <p>{width=\"15.901cm\" height=\"8.237cm\"}</p> <p>Pots clonar el teu repositori de GitHub a diversos ordinadors (per exemple, si vols treballar a casa teva i a l'institut), per tant abans de treballar en un repositori local has de sincronitzar els possibles canvis que s'hagin produ\u00eft al repositori remot, per aix\u00f2:</p> <p>git pull</p> <p>Per comprovar l'estat del meu repositori local:</p> <p>git status</p> <p>{width=\"15.901cm\" height=\"5.239cm\"}</p> <p>**Busca informaci\u00f3 per a crear un nou repositori anomenat prueba2_jesus. **</p> <p>En aquesta ocasi\u00f3, crea primer el repositori local (usant git init) i despr\u00e9s cerca informaci\u00f3 per sincronitzar-lo i crear el repositori remot a GitHub.</p> <p>Primero crear un reposito local prueba2_jesus con mkdir y entramos dentro:</p> <p>{width=\"15.901cm\" height=\"2.937cm\"}</p> <p>\u00abgit init\u00bb para iniciar git</p> <p>{width=\"15.901cm\" height=\"4.392cm\"}</p> <p>Creo un README.md y a\u00f1ado un contenido al README.md</p> <p>{width=\"15.901cm\" height=\"1.09cm\"}</p> <p>{width=\"15.901cm\" height=\"1.27cm\"}</p> <p>Y hago el primer commit:</p> <p>git add .</p> <p>git commit -m \"Hago el primer commit\"</p> <p>{width=\"15.901cm\" height=\"3.228cm\"}</p> <p>La primera l\u00ednea asegura que la rama local se llama main (que es lo que GitHub usa por defecto).</p> <p>git branch -M main</p> <p>{width=\"15.901cm\" height=\"0.926cm\"}</p> <p>La segunda l\u00ednea sube tu commit a GitHub y deja el enlace establecido.</p> <p>git push -u origin main</p> <p>{width=\"15.901cm\" height=\"5.583cm\"}</p> <p>Resultado en la nube:</p> <p>{width=\"15.894cm\" height=\"7.096cm\"}</p>"},{"location":"Ejercicio2/","title":"Pr\u00e1ctica 2","text":"<p>2</p> <p>Git</p> <p>GitHub</p> <p>JES\u00daS \u00c1LVAREZ OLMO</p> <p>2ASIX</p> <p>{width=\"16.113cm\" height=\"17.013cm\"}</p>   Enlace del ejercicio (markdown y creaci\u00f3n de un nuevo ejercicio)  **https://github.com/JesusKernel/prueba_markdown**"},{"location":"Ejercicio3/","title":"Pr\u00e1ctica 3","text":"<p>Git.</p> <p>Trabajando</p> <p>con</p> <p>ramas y uniones</p> <p>JES\u00daS \u00c1LVAREZ OLMO</p> <p>2ASIX</p> <p>1. Crea una branca que s'anomene primera al teu repositori local, i executa la instrucci\u00f3 necess\u00e0ria</p> <p>per comprovar que s'ha creat.</p> <p>a- Hago pongo el comando para ver en que rama estoy:</p> <p>git branch</p> <p>{width=\"15.66cm\" height=\"2.247cm\"}</p> <p>b- Creo la primera rama:</p> <p>git branch 1_rama</p> <p>{width=\"15.609cm\" height=\"5.106cm\"}</p> <p>c- Salgo de la rama main y voy a la creada:</p> <p>git checkout 1_rama</p> <p>{width=\"15.769cm\" height=\"5.71cm\"}</p> <p>2. Crea un nou fitxer en aquesta branca i fusiona'l amb la principal. S'ha produ\u00eft un conflicte? Raona la resposta.</p> <p>{width=\"17cm\" height=\"5.221cm\"}</p> <p>{width=\"17cm\" height=\"4.872cm\"}</p> <p>Ahora fusiono 1_rama en main:</p> <p>git merge 1_rama</p> <p>{width=\"16.798cm\" height=\"6.824cm\"}</p> <p>RESPUESTA: Como el archivo_1_rama.txt solo existe en 1_rama no hay conflicto.</p> <p>3. Esborra la branca primera.</p> <p>git branch -d 1_rama</p> <p>{width=\"17cm\" height=\"2.092cm\"}</p> <p>4. Crea una branca que s'anomene segona, i modifica un fitxer per produir un conflicte en unir-lo a la branca principal. Lliura el contingut del fitxer on s'ha produ\u00eft el conflicte.</p> <p>git checkout -b segunda</p> <p>git branch -v (para verificar el cambio de rama)</p> <p>{width=\"17cm\" height=\"5.253cm\"}</p> <p>echo \\\"L\u00ednea a\u00f1adida desde la rama segunda\\\" &gt;&gt; README.md</p> <p>git add README.md</p> <p>git commit -m \\\"Modificar README.md desde rama segunda\\\"</p> <p>{width=\"17cm\" height=\"5.165cm\"}</p> <p>Volvemos a rama main y modificamos el mismo archivo:</p> <p>git checkout main</p> <p>echo \\\"L\u00ednea a\u00f1adida desde la rama main\\\" &gt;&gt; README.md</p> <p>git add README.md</p> <p>git commit -m \\\"Modificar README.md desde rama main\\\"</p> <p>Y fusionamos la rama segunda en main:</p> <p>git merge segunda</p> <p>{width=\"17cm\" height=\"5.821cm\"}</p> <p>5. Soluciona el conflicte que has creat al punt anterior i sincronitza la branca segona al remot.</p> <p>cat README.md</p> <p>{width=\"12.063cm\" height=\"4.761cm\"}</p> <p>{width=\"12.725cm\" height=\"3.334cm\"}Hago cambios con nano README.md</p> <p>git add README.md</p> <p>git status</p> <p>{width=\"17cm\" height=\"7.198cm\"}</p> <p>git commit -m \\\"Resolver conflicto en README.md al fusionar segunda en main\\\"</p> <p>{width=\"17cm\" height=\"3.859cm\"}</p> <p>git push origin main</p> <p>{width=\"17cm\" height=\"5.819cm\"}</p> <p>Ahora subo todos los cambios al GitHub:</p> <p>git status</p> <p>git push origin main</p> <p>git push origin segunda</p> <p>{width=\"17cm\" height=\"8.703cm\"}</p> <p>{width=\"17cm\" height=\"6.537cm\"}</p> <p>URL al GitHub: https://github.com/JesusKernel/prueba_markdown.git</p>"},{"location":"Ejercicio4/","title":"Pr\u00e1ctica 4","text":"<p>Git.</p> <p>Colaborando</p> <p>pull request (PR)</p> <p>JES\u00daS \u00c1LVAREZ OLMO</p> <p>2ASIX</p> <p>Pulsando en el bot\u00f3n fork en el GitHub de Espe creo una copia en mi cuenta.</p> <p>{width=\"17cm\" height=\"11.663cm\"}</p> <p>{width=\"17cm\" height=\"10.098cm\"}</p> <p>Ahora clono el fork a mi ordenador:</p> <p>git clone https://github.com/JesusKernel/exercici4.git</p> <p>cd exercici4</p> <p>{width=\"17cm\" height=\"4.717cm\"}</p> <p>Creo una rama nueva y entro en ella:</p> <p>git checkout -b jesus_cambios</p> <p>{width=\"17cm\" height=\"2.708cm\"}</p> <p>sudo nano README.md</p> <p>A\u00f1ado: - [Jesus Alvarez Olmo](files/jao.md)</p> <p>{width=\"17cm\" height=\"8.855cm\"}</p> <p>Contesto la pregunta Quin m\u00f2dul m'agrada m\u00e9s?</p> <p>Modificando files/jao.md en visual studio code:</p> <p>{width=\"17cm\" height=\"12.215cm\"}</p> <p>A\u00f1ado y confirmo los cambios:</p> <p>git add README.md files/jao.md</p> <p>git commit -m \\\"Afegir enlla\u00e7 amb les meues inicials i resposta en jao.md\\\"</p> <p>{width=\"17cm\" height=\"7.177cm\"}</p> <p>Ahora hago un push para subir la rama jesus_cambios:</p> <p>git push origin jesus_cambios</p> <p>{width=\"17cm\" height=\"4.999cm\"}</p> <p>Pero da un error.</p> <p>Para solucionar el error he buscado informaci\u00f3n y cambio el remoto origin para que apunte a mi fork. Eso significa que ya puedo subir mi rama jesus_cambios a mi fork, y luego crear el Pull Request hacia el repositorio de Espe.</p> <p>Subo mi rama al fork:</p> <p>git push -u origin jesus_cambios</p> <p>{width=\"17cm\" height=\"11.264cm\"}</p> <p>Creo Pull Request en mi GitHub:</p> <p>Abro mi fork: https://github.com/JesusKernel/exercici4</p> <p>Voy al bot\u00f3n Compare &amp; pull request para la rama jesus_cambios.</p> <p>{width=\"15.739cm\" height=\"6.216cm\"}</p> <p>Hago clic en Create pull request.</p> <p>Y a\u00f1ado un t\u00edtulo descriptivo, por ejemplo:</p> <p>Afegir enlla\u00e7 al README i fitxer jao.md amb la meua resposta</p> <p>A\u00f1ado una descripci\u00f3n breve explicando tus cambios y pulso Create pull request.</p> <p>{width=\"17cm\" height=\"11.912cm\"}</p> <p>{width=\"17.872cm\" height=\"11.793cm\"}</p> <p>Esto crea la petici\u00f3n de que el profesor revise e integre tus cambios.</p> <p>Ahora tengo que esperar a que Espe acepte la petici\u00f3n mia.</p> <p>Cuando la profesora acepte el PR, los cambios se integrar\u00e1n en el repositorio original (espemm/exercici4).</p> <p>{width=\"17.739cm\" height=\"8.468cm\"}</p>"},{"location":"Ejercicio5/","title":"Pr\u00e1ctica 5","text":"<p>Mkdocs</p> <p>Github Pages</p> <p>JES\u00daS \u00c1LVAREZ OLMO</p> <p>2ASIX</p> <p>Primero instalo en el terminal de linux las dependencias necesarias:</p> <p>sudo apt update</p> <p>sudo apt install python3 python3-pip git -y</p> <p>pip install mkdocs mkdocs-material</p> <p>sudo apt install mkdocs</p> <p>As\u00ed se instala MkDocs y el tema *Material*.</p> <p>Ahora voy a crear un proyecto con MkDocs</p> <p>mkdocs new Proyecto_MkDocs_GitHub_Pages</p> <p>{width=\"17cm\" height=\"3.533cm\"}</p> <p>cd Proyecto_MkDocs_GitHub_Pages</p> <p>{width=\"17cm\" height=\"2.291cm\"}</p> <p>Esto crea:</p> <p>mkdocs.yml \u2192 archivo de configuraci\u00f3n</p> <p>docs/index.md \u2192 p\u00e1gina inicial</p> <p>En el siguiente paso edito docs/index.md con editor nano docs/index.md):</p> <p>{width=\"17cm\" height=\"5.696cm\"}</p> <p>Modifico el archivo /Proyecto_MkDocs_GitHub_Pages/index.md</p> <p>{width=\"17cm\" height=\"11.4cm\"}</p> <p>Ahora genero la WEB est\u00e1tica:</p> <p>mkdocs build</p> <p>{width=\"17cm\" height=\"6.634cm\"}</p> <p>Cuando ejecuto mkdocs build:</p> <p>MkDocs buscar\u00e1 el archivo mkdocs.yml (que est\u00e1 en la ra\u00edz del proyecto).</p> <p>Tomar\u00e1 los archivos Markdown que tengo en la carpeta docs/.</p> <p>Y crear\u00e1 una carpeta nueva llamada site/ con el HTML generado.</p> <p>Pruebo en un servidor local</p> <p>mkdocs serve</p> <p>{width=\"17cm\" height=\"13.002cm\"}</p> <p>En el navegador:</p> <p>{width=\"17cm\" height=\"9.162cm\"}</p> <p>Creo un nuevo repositorio con el mismo nombre que el proyecto:</p> <p>{width=\"19.507cm\" height=\"23.915cm\"}</p> <p>El el terminal dentro de la carpeta repositorio /Proyecto_MkDocs_GitHub_Pages:</p> <p>echo \\\"# Proyecto_MkDocs_GitHub_Pages\\\" &gt;&gt; README.md</p> <p>git init</p> <p>git add README.md</p> <p>git commit -m \\\"first commit\\\"</p> <p>git branch -M main</p> <p>{width=\"17cm\" height=\"8.999cm\"}git remote add origin https://github.com/JesusKernel/Proyecto_MkDocs_GitHub_Pages.git</p> <p>{width=\"17cm\" height=\"9.303cm\"}</p> <p>git push -u origin main</p> <p>{width=\"17cm\" height=\"5.805cm\"}</p> <p>Publicar en GitHub Pages:</p> <p>Cuando mi repositorio ya est\u00e9 en GitHub, ejecuto:</p> <p>mkdocs gh-deploy</p> <p>{width=\"17cm\" height=\"10.114cm\"}</p> <p>Se construye el sitio (site/)</p> <p>Y lo sube autom\u00e1ticamente a una nueva rama gh-pages en mi repositorio.</p> <p>URL : https://github.com/JesusKernel/Proyecto_MkDocs_GitHub_Pages</p>"}]}